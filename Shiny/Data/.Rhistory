plot(data2, col = colo[data2_km$cluster], pch = 20)
points(data2_km$centers, col = "black", pch="+", cex = 3)
data2 <- cbind(Sepal.Width, Petal.Width)
data2_km <- kmeans(data2, centers = 10)
colo <- c("skyblue", "green", "blue","orange","purple","yellow","darkblue", "pink", "black", "magenta")
plot(data2, col = colo[data2_km$cluster], pch = 20)
points(data2_km$centers, col = "red", pch="+", cex = 3)
data2 <- cbind(Sepal.Width, Petal.Width)
data2_km <- kmeans(data2, centers = 10)
colo <- c("skyblue", "green", "blue","orange","purple","yellow","darkblue", "pink", "black", "magenta")
plot(data2, col = colo[data2_km$cluster], pch = 20)
points(data2_km$centers, col = "red", pch="+", cex = 4)
data2 <- cbind(Sepal.Width, Petal.Width)
data2_km <- kmeans(data2, centers = 10)
colo <- c("skyblue", "green", "blue","orange","purple","yellow","darkblue", "pink", "black", "magenta")
plot(data2, col = colo[data2_km$cluster], pch = 20, cex=3)
points(data2_km$centers, col = "red", pch="+", cex = 4)
data2 <- cbind(Sepal.Width, Petal.Width)
data2_km <- kmeans(data2, centers = 10)
colo <- c("skyblue", "green", "blue","orange","purple","yellow","darkblue", "pink", "black", "magenta")
plot(data2, col = colo[data2_km$cluster], pch = 20, cex=3)
points(data2_km$centers, col = "red", pch="+", cex = 4)
data2 <- cbind(Sepal.Width, Petal.Width)
data2_km <- kmeans(data2, centers = 10)
colo <- c("skyblue", "green", "blue","orange","purple","yellow","darkblue", "pink", "black", "magenta")
plot(data2, col = colo[data2_km$cluster], pch = 20, cex=3)
points(data2_km$centers, col = "red", pch="+", cex = 4)
data2 <- cbind(Sepal.Width, Petal.Width)
data2_km <- kmeans(data2, centers = 10)
colo <- c("skyblue", "green", "blue","orange","purple","yellow","darkblue", "pink", "black", "magenta")
plot(data2, col = colo[data2_km$cluster], pch = 20, cex=3)
points(data2_km$centers, col = "red", pch="+", cex = 4)
den1 <- density(Sepal.Length[Species=="versicolor"],
from = 4, to = 8, bw = 0.4)
den2 <- density(Sepal.Length[Species=="virginica"],
from = 4, to = 8, bw = 0.4)
den3 <- density(Sepal.Length[Species=="setosa"],
from = 4, to = 8, bw = 0.4)
plot(den3, col = "magenta", lwd = 3, xlim = c(4,8), ylim = c(0,1),
main = "density of tree, h = 0.4")
lines(den1, col = "royalblue",lwd = 3)
lines(den2, col = "skyblue", lwd = 3)
legend("topleft",c("setosa","versicolor", "virginica"),
col=c("magenta","royalblue", "skyblue"), lwd=3)
lines(den2, col = "skyblue", lwd = 3
)
attach(iris)
den <- density(Sepal.Length, from = 4, to = 8, bw = 0.25)
hist(Sepal.Length, col = "seagreen", probability = T,
breaks = seq(4, 8, by = 0.25))
lines(den, lwd = 5, col = "red")
persp(kde$x1,kde$x2,
kde$fhat, col="skyblue",
xlab="Sepal.Length", ylab="Petal.Length",
zlab="Density", theta=90, phi=40)
image(kde$x1,kde$x2,kde$fhat, xlab="Sepal.Length",
ylab="Petal.Length", main="Density", col = terrain.colors(12))
den1 <- density(Sepal.Length[Species == "versicolor"],
from = 4, to = 9, bw = 0.4)
den2 <- density(Sepal.Length[Species == "virginica"],
from = 4, to = 9, bw = 0.4)
plot(x = den1$x, y = den1$y - den2$y, main = "Density Difference",
xlab = "Sepal.Length",
ylab = "density(versicolor) - density(versicolor)", col = "red", lwd = 5)
abline(h = 0)
data2 <- cbind(Sepal.Width, Petal.Width)
data2_km <- kmeans(data2, centers = 10)
colo <- c("skyblue", "green", "blue","orange","purple","yellow","darkblue", "pink", "black", "magenta")
plot(data2, col = colo[data2_km$cluster], pch = 16, cex=3)
points(data2_km$centers, col = "red", pch="+", cex = 4)
data2 <- cbind(Sepal.Width, Petal.Width)
data2_km <- kmeans(data2, centers = 10)
colo <- c("skyblue", "green", "blue","orange","purple","yellow","darkblue", "pink", "black", "magenta")
plot(data2, col = colo[data2_km$cluster], pch = 16, cex=3)
points(data2_km$centers, col = "red", pch="+", cex = 4)
data2 <- cbind(Sepal.Width, Petal.Width)
data2_km <- kmeans(data2, centers = 10)
colo <- c("skyblue", "green", "blue","orange","purple","yellow","darkblue", "pink", "black", "magenta")
plot(data2, col = colo[data2_km$cluster], pch = 16, cex=3)
points(data2_km$centers, col = "red", pch="+", cex = 4)
den1 <- density(Sepal.Length[Species == "versicolor"],
from = 4, to = 8, bw = 0.4)
den2 <- density(Sepal.Length[Species == "virginica"],
from = 4, to = 8, bw = 0.4)
den3 <- density(Sepal.Length[Species == "setosa"],
from = 4, to = 8, bw = 0.4)
plot(den1, col = "magenta", lwd = 3, xlim = c(4,8), ylim = c(0,1),
main = "density of tree, h = 0.4")
lines(den2, col = "royalblue",lwd = 3)
lines(den3, col = "skyblue", lwd = 3)
legend("topleft", c("versicolor", "virginica", "setosa"),
col = c("magenta", "royalblue", "skyblue"), lwd = 3)
den1 <- density(Sepal.Length[Species == "versicolor"],
from = 4, to = 8, bw = 0.4)
den2 <- density(Sepal.Length[Species == "virginica"],
from = 4, to = 8, bw = 0.4)
den3 <- density(Sepal.Length[Species == "setosa"],
from = 4, to = 8, bw = 0.4)
plot(den1, col = "magenta", lwd = 3, xlim = c(4,8), ylim = c(0,1),
main = "density of tree, h = 0.4")
lines(den2, col = "royalblue",lwd = 3)
lines(den3, col = "skyblue", lwd = 3)
legend("topleft", c("setosa", "versicolor", "viginica"),
col = c("magenta", "royalblue", "skyblue"), lwd = 3)
den1 <- density(Sepal.Length[Species == "versicolor"],
from = 4, to = 8, bw = 0.4)
den2 <- density(Sepal.Length[Species == "virginica"],
from = 4, to = 8, bw = 0.4)
den3 <- density(Sepal.Length[Species == "setosa"],
from = 4, to = 8, bw = 0.4)
plot(den1, col = "magenta", lwd = 3, xlim = c(4,8), ylim = c(0,1),
main = "density of tree, h = 0.4")
lines(den2, col = "royalblue",lwd = 3)
lines(den3, col = "skyblue", lwd = 3)
legend("topleft", c("versicolor", "viginica", "setosa"),
col = c("magenta", "royalblue", "skyblue"), lwd = 3)
image(x = denskde$x1, y = denskde$x2, z = denskde$fhat,
col = terrain.colors(12), gridsize = c(400,400),
xlab = "Sepal.Length", ylab = "Petal.Length",)
library(KernSmooth)
library(KernSmooth)
image(x = denskde$x1, y = denskde$x2, z = denskde$fhat,
col = terrain.colors(12), gridsize = c(400,400),
xlab = "Sepal.Length", ylab = "Petal.Length",)
image(x=denskde$x1,y=denskde$x2,z=denskde$fhat, xlab="Sepal.Length", gridsize = c(501,501),
ylab="Petal.Length", col = terrain.colors(12))
data1 <- cbind(Sepal.Length, Petal.Width)
denskde <- bkde2D(data1, bandwidth = 0.2, range.x=list(c(4,9),c(0,3)))
contour(x=denskde$x1,y=denskde$x2, z=denskde$fhat, lwd=1,
main="Density Contour (Iris Data)", xlab="Sepal.Length", ylab="Petal.Width")
image(x=denskde$x1,y=denskde$x2,z=denskde$fhat, xlab="Sepal.Length", gridsize = c(501,501),
ylab="Petal.Length", col = terrain.colors(12))
image(x=denskde$x1,y=denskde$x2,z=denskde$fhat, xlab="Sepal.Length", gridsize = c(51,51),
ylab="Petal.Length", col = terrain.colors(12))
warnings()
denskde <- bkde2D(data1, range.x = list(c(4,9),c(0,3)),
gridsize = c(400,400) bandwidth = 0.2)
denskde <- bkde2D(data1, range.x = list(c(4,9),c(0,3)),
gridsize = c(400,400), bandwidth = 0.2)
image(x=denskde$x1,y=denskde$x2,z=denskde$fhat, xlab="Sepal.Length",
ylab="Petal.Length", col = terrain.colors(12))
persp(denskde$x1,denskde$x2,
denskde$fhat, col="skyblue",
xlab="Sepal.Length", ylab="Petal.Length",
zlab="Density", theta=90, phi=40)
66221.1-2.131*37683.17*sqrt(1+1/16)
66221.1+2.131*37683.17*sqrt(1+1/16)
sqrt((0.25*(1-0.25))/100)
0.25 + 1.645*sqrt((0.25*(1-0.25))/1000)
x11
x1 <- c(14.0,14.3, 12.2, 15.1)
x2 <- c(12.1, 13.6, 11.9, 11.2)
x11 <- mean(x1)
x12 <- mean(x2)
s1 <- sd(x1)
s2 <- sd(x2)
sp <- ((4-1)/(4+4-2)) * s1^2 + ((4-1)/(4+4-2))*s2^2
x11-x12+2.447*sqrt(s1^2/4+s2^2/4)
x11-x12-2.447*sqrt(s1^2/4+s2^2/4)
df <- (s1^2/4 + s2^2/4)^2 / ((s1^4/(4^2 * (4-1)))+(s2^4/(4^2*(4-1))))
sqrt((0.25*(1-0.25))/100)
x11
x2
x12
s1
s2
sp
(0.798-1)/0.4740112
x<-c(4.6, 17.0, 17.4, 18.0, 18.5, 22.4,26.5, 30.0, 34.0, 38.8, 48.2, 63.5, 65.8,
73.9, 77.2, 79.8, 84.0)
y<-c(0.66, 0.92, 1.45, 1.03, 0.7, .73, 1.20, 0.8, 0.91, 1.19, 1.15, 1.12,
1.37, 1.45, 1.50, 1.36, 1.29)
plot(x,y)
fit<-lm(y~x)
summary(fit)
.00757/.001926
se<-0.2031   # s_e, or "residual standard error"
sxx<-sum((x-mean(x))^2) # s_xx
se/sqrt(sxx) # std.error
confint(fit)
cor.test(y,x)
# using the formulas in the text and from lecture:
rr<-cor(y, x)
nn<-length(y)
tobs<-rr*sqrt(nn-2)/sqrt(1-rr^2)
tobs
2*pt(tobs,df=nn-2,lower.tail=FALSE)
predict(fit,data.frame(x=40))
predict(fit,data.frame(x=40),interval="confidence")
predict(fit,data.frame(x=40),interval="prediction")
ex.iron<-c(61,175,111,124,130,173,169,169,160,244,257,333,199)
ex.al<-c(13,21,24,23,64,38,33,61,39,71,112,88,54)
phos.adsorp<-c(4,18,14,18,26,26,21,30,28,36,65,62,40)
ex.iron<-c(61,175,111,124,130,173,169,169,160,244,257,333,199)
ex.al<-c(13,21,24,23,64,38,33,61,39,71,112,88,54)
phos.adsorp<-c(4,18,14,18,26,26,21,30,28,36,65,62,40)
plot(data.frame(ex.iron,ex.al,phos.adsorp))
fit<-lm(phos.adsorp~ex.iron+ex.al)
summary(fit)
0.11273 + c(-1,1)*qt(0.025,df=10,lower.tail=FALSE)*.02969
confint(fit)    # (0.0465, 0.179)
predict(fit,data.frame(ex.iron=200,ex.al=40),interval="confidence")
# And, we can predict and get a 95% prediction interval
# for an individual phosphate adsorption
# when extractable iron is 200 and extractable aluminum is 40:
predict(fit,data.frame(ex.iron=200,ex.al=40),interval="prediction")
# Notice the prediction interval is wider.
# Let's look at the fit again
fit<-lm(phos.adsorp~ex.iron+ex.al)
summary(fit)
( 0.9485/2) /( (1-.9485)/(13-(2+1)))
press<-c(1.4,2.2,4.6,4.9,4.6,4.7,4.6,4.5,4.8,1.4,4.7,1.6,4.5,4.7,4.8,4.6,4.3,4.9,1.7,4.6,2.6,3.1,4.7,2.5,4.5,2.1,1.8,1.5,1.3,4.6)
formaldehyde<-c(8,2,7,10,7,7,7,5,4,5,8,2,4,6,10,4,4,10,5,8,10,2,6,7,5,8,4,6,4,7)
catalyst<-c(4,4,4,7,4,7,13,4,7,1,10,4,10,7,13,10,13,10,4,13,1,13,13,1,13,1,1,1,1,10)
temp<-c(100,180,180,120,180,180,140,160,140,100,140,100,180,120,180,160,100,120,100,140,180,140,180,120,140,160,180,160,100,100)
time<-c(1,7,1,5,5,1,1,7,3,7,3,3,3,7,3,5,7,7,1,1,1,1,7,7,1,7,7,1,1,7)
plot(data.frame(press,formaldehyde,catalyst,temp,time))
fit.full<-lm(press~catalyst+temp+time+formaldehyde)
summary(fit.full)
# Then, we fit the "reduced" model, the model without time and formaldehyde.
fit.reduced<-lm(press~catalyst+temp)
summary(fit.reduced)
( (SSEreduced-SSEfull)/2 ) / (SSEfull/(30-5))  # this is our observed F-statistic
pf(4.27643,2,25,lower.tail=F)   # this is the p-value
anova(fit.reduced,fit.full) # this does the test quickly
# Another example of F-test for subset of predictors
# Input the data again
ex.iron<-c(61,175,111,124,130,173,169,169,160,244,257,333,199)
ex.al<-c(13,21,24,23,64,38,33,61,39,71,112,88,54)
phos.adsorp<-c(4,18,14,18,26,26,21,30,28,36,65,62,40)
# plot the data again
plot(data.frame(ex.iron,ex.al,phos.adsorp))
# fit the reduced model
fit.reduced<-lm(phos.adsorp~1)
summary(fit.reduced)
# fit the full model
fit.full<-lm(phos.adsorp~ex.iron+ex.al)
summary(fit.full) # notice the F-statistic for model utility (92.03)
# do the F-test for subset of predictors
SSEreduced<-17.61^2*(13-1)
SSEfull<-4.379^2*(13-3)
( (SSEreduced-SSEfull)/2 ) / (SSEfull/(13-3))
pf(92.03,2,10,lower.tail=F)
anova(fit.reduced,fit.full) # notice the F-statistic (92.03)
# In this example, the subset of predictors we are testing is all of the
# predictors, so the test for subset of predictors is the same as the test
# for model utility.
###############################################################################
##### Effect of collinearity in multiple linear regression
# Back in lab 4, we examined the effect of collinearity on the regression
# coefficients, using fake/simulated data.
# Recall the make.fit function from lab 4. It is modified here to report the
# standard error of one of the coefficients from a multiple linear regression
# model with 2 predictors, x1 and x2, when the correlation (r) between x1 and
# x2 is varied.
make.fit = function(r)  # This function takes in r (i.e. cor between x1, x2,
{                       # not between y and anything.)
library(MASS)
set.seed(1)
n=100
dat =  mvrnorm(n, rep(0, 2), matrix(c(1,r,r,1),2,2))
x1 = dat[,1] ; x2 = dat[,2]
beta1 = 2
beta2 = 3
y = 1 + beta1*x1 + beta2*x2 + rnorm(n,0,0.1)  # Make y data, and add noise.
lm.1 = lm( y ~ x1 + x2)               # Here we fit a plain through the data.
return(summary(lm.1)$coeff[2,2])      # return the std err of beta 1.
}
# Now, let's vary r (the degree of collinearity) from .01 to 0.99, and
# make a plot of the std error of the first regression coefficient versus r:
r = stderrbeta1 = numeric(99)        # Make a 99-dimensional array for storing r and
# standard error of the estimate of beta1 (stderrbeta1)
for(i in c(1:99)){         # Run make.fit() 99 times.
r[i] = i/100
stderrbeta1[i] = make.fit(r[i])
}
plot(r,stderrbeta1)
x <- c(5,12,14,17,23,30,40,47,55,67,72,81,96,112,127)
y <- c(4,10,13,15,15,25,27,46,38,46,53,70,82,99,100)
plot(x,y)
slope(x,y)
lm(y~x)
fit <- lm(y~x)
summary(fit)
0.020178+ 0.071422
sqrt(0.7797)
-0.07464-2.12*0.009923
-0.07464+2.12*0.009923
x <- c(0.11, 0.13, 0.14, 0.18, 0.29, 0.44, 0.67, 0.78, 0.93)
y <- c(1.72, 2.17, 2.33, 3.00, 5.17, 7.61, 11.17, 12.72, 14.78)
fit <- lm(y~x)
fit
summary(fit)
predict(fit,data.frame(x=40),interval="confidence")
x <- c(0.11, 0.13, 0.14, 0.18, 0.29, 0.44, 0.67, 0.78, 0.93)
y <- c(1.72, 2.17, 2.33, 3.00, 5.17, 7.61, 11.17, 12.72, 14.78)
fit <- lm(y~x)
predict(fit,interval="confidence")
predict(fit,data.frame(x=0.4),interval="confidence")
predict(fit,data.frame(x=0.4),interval="prediction")
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(44.6, 48.5, 41.0, 47.3, 46.1)
level <- as.factor(c(1,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4))
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
anova <- aov(fit)
summary(anova)
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(44.6, 48.5, 41.0, 47.3, 46.1)
level <- c(1,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4)
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
summary(fit)
x <- c(0.11, 0.13, 0.14, 0.18, 0.29, 0.44, 0.67, 0.78, 0.93)
y <- c(1.72, 2.17, 2.33, 3.00, 5.17, 7.61, 11.17, 12.72, 14.78)
fit <- lm(y~x)
fit$r.squared
fit$rsquare
summary(fit)
0.002775-0.001121*2.093
0.002775+0.001121*2.093
4.4783455-2.093*0.02438
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(44.6, 48.5, 41.0, 47.3, 46.1)
level <- c(1.6,1.6,1.6,1.6,1.6,3.8,3.8,3.8,3.8,6.0,6.0,6.0,6.0,10.2,10.2,10.2,10.2,10.2)
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
summary(fit)
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(44.6, 48.5, 41.0, 47.3, 46.1)
level <- c(1.6,1.6,1.6,1.6,1.6,3.8,3.8,3.8,3.8,6.0,6.0,6.0,6.0,10.2,10.2,10.2,10.2,10.2)
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
anova <- aov(fit)
summary(anova)
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(44.6, 48.5, 41.0, 47.3, 46.1)
level <- as.factor(c(1.6,1.6,1.6,1.6,1.6,3.8,3.8,3.8,3.8,6.0,6.0,6.0,6.0,10.2,10.2,10.2,10.2,10.2))
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
anova <- aov(fit)
summary(anova)
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(60.6, 58.5, 55.0, 65.2, 61.3)
level <- as.factor(c(1.6,1.6,1.6,1.6,1.6,3.8,3.8,3.8,3.8,6.0,6.0,6.0,6.0,10.2,10.2,10.2,10.2,10.2))
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
anova <- aov(fit)
summary(anova)
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(60.6, 58.5, 55.0, 65.2, 61.3)
level <- c(1.6,1.6,1.6,1.6,1.6,3.8,3.8,3.8,3.8,6.0,6.0,6.0,6.0,10.2,10.2,10.2,10.2,10.2)
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
summary(fit)
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(60.6, 58.5, 55.0, 65.2, 61.3)
level <- as.factor(c(1.6,1.6,1.6,1.6,1.6,3.8,3.8,3.8,3.8,6.0,6.0,6.0,6.0,10.2,10.2,10.2,10.2,10.2))
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
anova <- aov(fit)
summary(anova)
plot(level, x)
plot(as.factor(level), x)
plot(fit)
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(60.6, 58.5, 55.0, 65.2, 61.3)
level <- c(1.6,1.6,1.6,1.6,1.6,3.8,3.8,3.8,3.8,6.0,6.0,6.0,6.0,10.2,10.2,10.2,10.2,10.2)
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
summary(fit)
plot(fit)
x1 <- c(59.5, 53.3, 56.8, 63.1, 58.7)
x2 <- c(55.2, 59.1, 52.8, 54.5)
x3 <- c(51.7, 48.8, 53.9, 49.0)
x4 <- c(60.6, 58.5, 55.0, 65.2, 61.3)
level <- as.factor(c(1.6,1.6,1.6,1.6,1.6,3.8,3.8,3.8,3.8,6.0,6.0,6.0,6.0,10.2,10.2,10.2,10.2,10.2))
x <- c(x1, x2, x3, x4)
fit <- lm(x~level)
anova <- aov(fit)
summary(anova)
plot(fit)
shiny::runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
install.packages("shinythemes")
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
library(dplyr)
data <- read.csv("../Data/kc_house_data.csv", stringsAsFactors = FALSE)
colnames(data)[colnames(data)=="date"] <- "month"
# filter out the houses that are extremely big or small, and
# also clean out some of the unnecessary columns
suited_house <- data %>%
filter (bedrooms >1 & bedrooms <6
& bathrooms > 1 & bathrooms <6) %>%
select(-floors, -sqft_lot, -waterfront,
-grade, -sqft_living15,
-sqft_lot15, -view)
suited_house$month  <- (substr(suited_house$month, 5, 6))  #Takes only the month of date
write.csv(suited_house, file = "suited_house.csv")
setwd("C:/Users/cyj/Final-Project-chi-2/Data")
library(dplyr)
data <- read.csv("../Data/kc_house_data.csv", stringsAsFactors = FALSE)
colnames(data)[colnames(data)=="date"] <- "month"
# filter out the houses that are extremely big or small, and
# also clean out some of the unnecessary columns
suited_house <- data %>%
filter (bedrooms >1 & bedrooms <6
& bathrooms > 1 & bathrooms <6) %>%
select(-floors, -sqft_lot, -waterfront,
-grade, -sqft_living15,
-sqft_lot15, -view)
suited_house$month  <- (substr(suited_house$month, 5, 6))  #Takes only the month of date
write.csv(suited_house, file = "suited_house.csv")
library(dplyr)
data <- read.csv("../Data/kc_house_data.csv", stringsAsFactors = FALSE)
colnames(data)[colnames(data)=="date"] <- "month"
# filter out the houses that are extremely big or small, and
# also clean out some of the unnecessary columns
suited_house <- data %>%
filter (bedrooms >1 & bedrooms <6
& bathrooms > 1 & bathrooms <6) %>%
select(-floors, -sqft_lot, -waterfront,
-grade, -sqft_living15,
-sqft_lot15, -view)
suited_house$month  <- (substr(suited_house$month, 5, 6))  #Takes only the month of date
write.csv(suited_house, file = "suited_house.csv")
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
filtered <- suited_house %>%
filter(bedrooms <= 6 & bathrooms <= 6
& zipcode == '98001' & between(price, 0, 1000000)
& condition <= 5 & between(sqft_living, 0, 10000))
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
View(filtered)
View(filtered)
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
data <- filtered %>%
# group by range
mutate(interval = cut(bedrooms, c(0, 2000, 4000, 6000, 8000, 10000, Inf))) %>%
group_by(interval) %>%
summarise(average_price = mean(price), number = n())
data
data <- filtered %>%
group_by(get('bedrooms')) %>%
summarise(average_price = mean(price), number = n())
data
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
data <- filtered %>%
group_by(get('bedrooms')) %>%
summarise(average_price = mean(price), number = n())
data <- filtered %>%
group_by('bedrooms') %>%
summarise(average_price = mean(price), number = n())
data
data <- filtered %>%
group_by(get('bedrooms')) %>%
summarise(average_price = mean(price), number = n())
data
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
runApp('C:/Users/cyj/Final-Project-chi-2/Shiny')
data <- filtered %>%
# group by range
mutate(interval = cut(sqft_living, c(0, 2000, 4000, 6000, 8000, 10000, Inf))) %>%
group_by(interval) %>%
summarise(average_price = mean(price), number = n())
data
